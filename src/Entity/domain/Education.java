/**
 * This file was generated by the Jeddict
 */
package Entity.domain;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;

/**
 * @author puyaa
 */
@Entity
public class Education {

    @Id
    @Column (name = "education_id")
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long educationId;

    @Basic
    private String name;

    @Basic
    private int points;

    @ManyToMany(cascade = CascadeType.PERSIST)
    private Set<Course> courses;
    
    @OneToMany(mappedBy ="education", cascade = CascadeType.PERSIST, fetch = FetchType.LAZY)
    private Set<Student> students;

    public Education() {
    }
    
    public Education(String name, int points) {
        this.name = name;
        this.points = points;
        
    }
    
    

    public Long getEducationId() {
        return this.educationId;
    }

    public void setEducationId(Long educationId) {
        this.educationId = educationId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPoints() {
        return this.points;
    }

    public void setPoints(int points) {
        this.points = points;
    }

    public Set<Student> getStudents() {
        if (students == null) {
            students = new HashSet<>();
        }
        return this.students;
    }

    public void setStudents(Set<Student> students) {
        this.students = students;
    }
    
    public void addStudent(Student student) {
        getStudents().add(student);
        student.setEducation(this);
    }

    public void removeStudent(Student student) {
        getStudents().remove(student);
        student.setEducation(null);
    }
    
    

    public Set<Course> getCourses() {
        if (courses == null) {
            courses = new HashSet<>();
        }
        return this.courses;
    }

    public void setCourses(Set<Course> courses) {
        this.courses = courses;
    }
    
    public void addCourse(Course course) {
        getCourses().add(course);
        course.getEducations().add(this);
    }

    public void removeCourse(Course course) {
        getCourses().remove(course);
        course.getEducations().remove(this);
    }

}